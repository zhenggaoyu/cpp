函数模板：
        用以创建一个通用的函数，以支持多种不同的形参，可取代部分函数体重复设计的重载函数。
        定义形式：
        template <class 数据类型标识符1, class 数据类型标识符2...>
        返回类型 函数名 (参数表)
        {
                函数体 
        }
        其中template是定义函数模板的关键字，后跟< >；class也可写typename，是声明数据类型标识符的关键字。
        如例：
        #include<iostream>
        using namespace std;
        
        template <class T> //定义一个函数模板
        void fun(T a, T b) //实现的是多种数据类型的两个数据间大小的比较
        {
	        cout<<((a>b)?a:b);
        }

        int main()
        {
	        fun(2, 3); //编译时，实参识别为int	
                fun('a', 'b'); //编译时，实参识别为char	
                fun(1.1, 1.2); //编译时，实参识别为float	
                return 0;
        }
        程序运行显示：
        3 
        b
        1.2


        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
